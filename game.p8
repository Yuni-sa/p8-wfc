pico-8 cartridge // http://www.pico-8.com
version 42
__lua__

function _init()
 player_init()
 tile_types_init()
 grid=create_grid(10,10)
end

function _update()
 update_player()
 if (btn(5)) wfc(grid)
end

function _draw() 
 cls(0)
 draw_grid(grid)
 draw_player()

end
-->8
-- player --
function player_init()
 player={x=5,y=5}
 wall=0
end

-- player movement --
function move(o)
 local lx=o.x
 local ly=o.y
 
 if (btn(➡️)) o.x+=1
 if (btn(⬅️)) o.x-=1
 if (btn(⬆️)) o.y-=1
 if (btn(⬇️)) o.y+=1
 
 if (collide(o)) then
  o.x=lx
  o.y=ly
 end
end

-- player colision --
function collide(o)
 local x1=o.x+3
 local y1=o.y+3
 local x2=(o.x+4)
 local y2=(o.y+4)
 
 local a=pget(x1,y1)
 local b=pget(x1,y2)
 local c=pget(x2,y1)
 local d=pget(x2,y2)
 
 if (a==wall) or (b==wall) or (c==wall) or (d==wall) then
  return true
 else
  return false
 end
end

-- update player --
function update_player()
 move(player)
end

-- draw player --
function draw_player()
  spr(0,player.x,player.y)
end
-->8
-- tiles --
function tile_types_init()
  -- base tile types using first 4 sprites
  local p = {name="p", sprite = 64, size = 2, flipx=false, flipy=false, up=1, down=1, left=1, right=1}  -- + shape (all connected)
  local t = {name="t", sprite = 66, size = 2, flipx=false, flipy=false, up=0, down=1, left=1, right=1}  -- T shape (3 connected)
  local l = {name="l", sprite = 96, size = 2, flipx=false, flipy=false, up=1, down=0, left=0, right=1}  -- L shape (2 connected)
  local i = {name="i", sprite = 98, size = 2, flipx=false, flipy=false, up=1, down=1, left=0, right=0}  -- I shape (2 connected)
  local m = {name="-", sprite = 68, size = 2, flipx=false, flipy=false, up=0, down=0, left=1, right=1}  -- - shape (2 connected)
  local blank = {name="blank", sprite = 100, size = 2, flipx=false, flipy=false, up=0, down=0, left=0, right=0} -- blank tile for testing
  
  -- rotated and flipped variations with adjusted wall connections
  local t2 = {name="t2", sprite = 66, size = 2, flipx=true, flipy=true, up=1, down=0, left=1, right=1}   -- T shape rotated down
  
  local l2 = {name="l2", sprite = 96, size = 2, flipx=true, flipy=false, up=1, down=0, left=1, right=0}  -- L shape rotated right
  local l3 = {name="l3", sprite = 96, size = 2, flipx=false, flipy=true, up=0, down=1, left=0, right=1}  -- L shape rotated left
  local l4 = {name="l4", sprite = 96, size = 2, flipx=true, flipy=true, up=0, down=1, left=1, right=0}   -- L shape rotated down
  

  default_potential = 8
  return {p, t, l, i, t2, l2, l3, l4, m}
end

function new_tile(i, j)
  local tile_types = tile_types_init()
  return {
    potential = {tile_types[1], tile_types[2], tile_types[3], tile_types[4], 
                tile_types[5], tile_types[6], tile_types[7], tile_types[8],
                tile_types[9], tile_types[10], tile_types[11], tile_types[12], tile_types[13]},
    entropy = default_potential,
    x = i,
    y = j
  }
end

function get_possible_neighbors(g, x, y)
  local neighbors = {}
  local potential = {
    {x=x-1, y=y, my_dir="up", their_dir="down"},
    {x=x+1, y=y, my_dir="down", their_dir="up"}, 
    {x=x, y=y-1, my_dir="left", their_dir="right"},
    {x=x, y=y+1, my_dir="right", their_dir="left"}
  }
  
  for n in all(potential) do
    if not (n.x < 0 or n.x >= #g or n.y < 0 or n.y >= #g[0]) then
      add(neighbors, n)
    end
  end
  
  return neighbors
end

function create_grid(rows, cols, default_value)
  local grid={}
  for i=0, rows-1 do
    grid[i]={}
    for j=0, cols-1 do
      grid[i][j]=new_tile(i, j)
    end
  end
  return grid
end

-- draw grid
function draw_grid(g)
  for i = 0, #g-1 do
      for j = 0, #g[i]-1 do
          if #g[i][j].potential > 0 then
              spr(g[i][j].potential[1].sprite, j * 16, i * 16, g[i][j].potential[1].size, g[i][j].potential[1].size, g[i][j].potential[1].flipx, g[i][j].potential[1].flipy) -- Draw 2x2 sprite at 16x16 grid position
          end
      end
  end
end
-->8
-- wave function collapse --

function wfc(g)
  while not is_grid_collapsed(g) do
    iterate(g)
  end
end

-- collapse a tile
function collapse_tile(g, coords)
  if g[coords.x][coords.y].entropy == 0 then return end
  g[coords.x][coords.y].entropy = 0
  local potential_index = flr(rnd(#g[coords.x][coords.y].potential)) + 1
  g[coords.x][coords.y].potential = {g[coords.x][coords.y].potential[potential_index]}
end

-- iterate grid
function iterate(g)
  local coords = get_min_entropy(g)
  if coords.x == -1 then return end
  collapse_tile(g, coords)
  propagate(g, coords)
end

function propagate(g, coords)
  local stack = new_stack()
  stack:push(coords)

  while stack:size() > 0 do
    local cur_coords = stack:pop()
    local cur_tile = g[cur_coords.x][cur_coords.y]
    neighbors = get_possible_neighbors(g, cur_coords.x, cur_coords.y)
    
    for n in all(neighbors) do
      local other_tile = g[n.x][n.y]
      local found = false
      local valid_connections = {}
      
      -- first, find all valid connections between current tile and neighbor
      for i = 1, #cur_tile.potential do
        for j = 1, #other_tile.potential do
          if cur_tile.potential[i][n.my_dir] == other_tile.potential[j][n.their_dir] then
            add(valid_connections, other_tile.potential[j])
          end
        end
      end
      
      -- then remove any potential tile types that aren't in valid_connections
      for i = #other_tile.potential, 1, -1 do
        local is_valid = false
        for j = 1, #valid_connections do
          if other_tile.potential[i] == valid_connections[j] then
            is_valid = true
            break
          end
        end
        if not is_valid then
          found = true
          deli(other_tile.potential, i)
          if other_tile.entropy != 0 then
            other_tile.entropy -= 1
          end
        end
      end
      
      if found and (not stack:contains({x=n.x, y=n.y})) then
        stack:push({x=n.x, y=n.y})
      end
      g[n.x][n.y] = other_tile
    end
  end
end

-- get tile with lowest entropy
function get_min_entropy(g)
  local min_entropy = default_potential
  local coords = {x=0, y=0}
  for i = 0, #g-1 do
    for j = 0, #g[i]-1 do
      if g[i][j].entropy < min_entropy and g[i][j].entropy > 0 then
        min_entropy = g[i][j].entropy
        coords = {x=i, y=j}
      end
    end
  end
  return coords
end

function to_string(lst)
    local str = ""
    for i=1,#lst do
        str = str .. lst[i].name .. " "
    end
    return str
end

function is_grid_collapsed(g)
  for i = 0, #g-1 do
    for j = 0, #g[i]-1 do
      if g[i][j].entropy > 0 then
        return false
      end
    end
  end
  return true
end
-->8
-- stack --

function new_stack()
  return {
      data = {},

      push = function(self, val)
          add(self.data, val)
      end,

      pop = function(self)
          if #self.data > 0 then
              return deli(self.data, #self.data)
          end
          return nil
      end,

      peek = function(self)
          if #self.data > 0 then
              return self.data[#self.data]
          end
          return nil
      end,

      size = function(self)
          return #self.data
      end,

      contains = function(self, val)
          for i = 1, #self.data do
            if self.data[i] == val then
                  return true
              end
          end
          return false
      end
  }
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbb30dddddddddddddddddddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbb30dddddddddddddddddddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbb30dddddddddddddddddddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbb30dddddddddddddddddddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
000003bbbb3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
333333bbbb3333333333333333333333333333333333333300000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000
333333bbbb333333333333bbbb333333333333333333333300000000000000000000000000000000000000000000000000000000000000000000000000000000
000003bbbb300000000003bbbb300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbb30dddddddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbb30dddddddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbb30dddddddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbb30dddddddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbb30dddddddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbb30dddddddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbb30dddddddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbb30dddddddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbb300000dddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbb333333dddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbbbbbbbbdddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbbbbbbbbdddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbbbbbbbbdddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd03bbbbbbbbbbdddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd033333333333dddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddd000000000000dddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddddddddddddddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddddddddddddddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddddddddddddddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddddddddddddddd03bbbb30dddddddddddddddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 46424344

